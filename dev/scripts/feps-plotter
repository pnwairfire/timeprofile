#!/usr/bin/env python3

import argparse
import datetime
import logging
import os
import sys

import matplotlib.pyplot as pyplot
import tabulate

root_dir = os.path.abspath(os.path.join(sys.path[0], '../../'))
sys.path.insert(0, root_dir)
from timeprofile import feps

EXAMPLES_STRING = """
Examples:

    {script} -s 2019-08-10T00:00:00 -e 2019-08-11T00:00:00 -d 12.0 -a 7.3 -b 0.6 -t rx -m dry

    {script} -s 2019-08-10T00:00:00 -e 2019-08-11T00:00:00 -d 12.0 -a 7.3 -b 0.6 \\
        --ignition-start 2019-08-10T09:00:00 --ignition-end 2019-08-10T12:00:00

 """.format(script=sys.argv[0])
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--start', help="activity window start time",
        required=True)
    parser.add_argument('-e', '--end', help="activity window end time",
        required=True)
    parser.add_argument('-d', '--duff-fuel-load', type=float,
        help="duff fuel load, in tons", required=True)
    parser.add_argument('-a', '--total-above-ground-consumption', type=float,
        help="total above ground consumption, in tons", required=True)
    parser.add_argument('-b', '--total-below-ground-consumption', type=float,
        help="total below ground consumption, in tons", required=True)
    parser.add_argument('--ignition-start', help="ignition start time")
    parser.add_argument('--ignition-end', help="ignition end time")
    parser.add_argument('-t', '--fire-type', default=feps.FireType.RX,
        help="ignition end time; default {}".format(feps.FireType.RX))
    parser.add_argument('-m', '--moisture-category',
        default=feps.MoistureCategory.MODERATE,
        help="ignition end time; default {}".format(
            feps.MoistureCategory.MODERATE))

    parser.add_argument('--skip-graph', help="Just list table of values",
        action="store_true")

    parser.epilog = EXAMPLES_STRING
    parser.formatter_class = argparse.RawTextHelpFormatter

    args = parser.parse_args()

    logging.basicConfig(level=logging.INFO,
        format='%(asctime)s %(levelname)s: %(message)s')

    logging.info(" Args:")
    for k,v in args.__dict__.items():
        logging.info("   %s: %s", k, v)

    return args

DATETIME_FORMAT = "%Y-%m-%dT%H:%M:%S"

def get_profiler(args):
    s = datetime.datetime.strptime(args.start, DATETIME_FORMAT)
    e = datetime.datetime.strptime(args.end, DATETIME_FORMAT)
    ig_start = (args.ignition_start and
        datetime.datetime.strptime(args.ignition_start, DATETIME_FORMAT))
    ig_end = (args.ignition_end and
        datetime.datetime.strptime(args.ignition_end, DATETIME_FORMAT))

    return feps.FepsTimeProfiler(s, e,
        args.duff_fuel_load,
        args.total_above_ground_consumption,
        args.total_below_ground_consumption,
        local_ignition_start_time=ig_start,
        local_ignition_end_time=ig_end,
        fire_type=args.fire_type,
        moisture_category=args.moisture_category)

def get_hours(profiler):
    return list(range(len(profiler.hourly_fractions['area_fraction'])))

def plot(profiler):
    hours = get_hours(profiler)

    # matplotlib plot
    pyplot.plot(hours, profiler.hourly_fractions['area_fraction'],
        label='area_fraction',color='black')
    pyplot.plot(hours, profiler.hourly_fractions['residual'],
        label='residual',color='magenta')
    pyplot.plot(hours, profiler.hourly_fractions['smoldering'],
        label='smoldering',color='blue')
    pyplot.plot(hours, profiler.hourly_fractions['flaming'],
        label='flaming',color='red')
    pyplot.xlabel('Hour')
    pyplot.ylabel('Fraction')
    pyplot.title(('FEPS hourly fractions from {} to {}, given ignition '
        'from {} to {}').format(profiler.start, profiler.end,
        profiler.ignition_start, profiler.ignition_end))
    pyplot.legend()
    pyplot.show()

def log_hourly_fractions(profiler):
    hours = ['hour'] + get_hours(profiler)
    rows = [
        ['area_fraction'] + profiler.hourly_fractions['area_fraction'],
        ['flaming'] + profiler.hourly_fractions['flaming'],
        ['smoldering'] + profiler.hourly_fractions['smoldering'],
        ['residual'] + profiler.hourly_fractions['residual'],
    ]
    print(tabulate.tabulate(rows, headers=hours))

def main():
    args = parse_args()
    profiler = get_profiler(args)
    log_hourly_fractions(profiler)
    if not args.skip_graph:
        plot(profiler)

if __name__ == "__main__":
    main()
