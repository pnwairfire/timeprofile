#!/usr/bin/env python3

import argparse
import datetime
import logging
import os
import sys

import matplotlib.pyplot as pyplot

root_dir = os.path.abspath(os.path.join(sys.path[0], '../../'))
sys.path.insert(0, root_dir)
from timeprofile import feps

EXAMPLES_STRING = """
Examples:

    {script} -s 2019-08-10T00:00:00 -e 2019-08-11T00:00:00 \\
        --ignition-start 2019-08-10T09:00:00 --ignition-end 2019-08-10T12:00:00

 """.format(script=sys.argv[0])
def parse_args():
    parser = argparse.ArgumentParser()
    parser.add_argument('-s', '--start', help="activity window start time",
        required=True)
    parser.add_argument('-e', '--end', help="activity window end time",
        required=True)
    parser.add_argument('--ignition-start', help="ignition start time",
        required=True)
    parser.add_argument('--ignition-end', help="ignition end time",
        required=True)

    parser.epilog = EXAMPLES_STRING
    parser.formatter_class = argparse.RawTextHelpFormatter

    args = parser.parse_args()

    logging.basicConfig(level=logging.DEBUG,
        format='%(asctime)s %(levelname)s: %(message)s')

    logging.info(" Args:")
    for k,v in args.__dict__.items():
        logging.info("   %s: %s", k, v)

    return args

DATETIME_FORMAT = "%Y-%m-%dT%H:%M:%S"

def get_profiler(args):
    s = datetime.datetime.strptime(args.start, DATETIME_FORMAT)
    e = datetime.datetime.strptime(args.end, DATETIME_FORMAT)
    ig_start = datetime.datetime.strptime(args.ignition_start, DATETIME_FORMAT)
    ig_end = datetime.datetime.strptime(args.ignition_end, DATETIME_FORMAT)
    return feps.FepsTimeProfiler(s,e,
        local_ignition_start_time=ig_start,
        local_ignition_end_time=ig_end)

def plot(profiler):
    hours = list(range(len(profiler.hourly_fractions['area_fraction'])))

    # matplotlib plot
    pyplot.plot(hours, profiler.hourly_fractions['flaming'],
        label='flaming',color='r')
    pyplot.plot(hours, profiler.hourly_fractions['smoldering'],
        label='smoldering',color='r')
    pyplot.plot(hours, profiler.hourly_fractions['residual'],
        label='residual',color='g')
    pyplot.xlabel('Hour')
    pyplot.ylabel('faction')
    pyplot.title('FEPS curve for')
    pyplot.legend()
    pyplot.show()

def main():
    args = parse_args()
    profiler = get_profiler(args)
    plot(profiler)

if __name__ == "__main__":
    main()
